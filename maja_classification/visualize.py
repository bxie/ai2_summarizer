# Maja Svanberg
# visualize.py
# 2016-01-19
# work in progress


import json
import matplotlib.pyplot as plt
import numpy as np

def openJSON(file):
    with open(file) as jsonfile:
        data =  json.load(jsonfile)
    return data

def createPlot(closeTuts):
    '''takes a list generated by closestTutorials and 
    displays it in a plot graph'''
    fig = plt.figure()
    ax = fig.add_subplot(111)
    X = range(len(closeTuts[1]))
    Y = [x[1] for x in closeTuts[1]]
    plt.plot(X, Y, 'ro')
    plt.axis([-1, len(X), 0, closeTuts[1][-1][1]+1])
    plt.ylabel('Distance to Tutorials')
    plt.title(closeTuts[0])
    for i in X:
        xy = zip(X,[x[1] for x in closeTuts[1]])
        ax.annotate(closeTuts[1][i][0], xy=xy[i])
    plt.show()

def plotTutandProj(tut, proj):
 #   fig = plt.figure()                                                                                                                            
    X = np.array(tut)
    Y = np.array(map(lambda x: 1, X))
    plt.plot(sorted(X), 'ro')
    plt.plot(np.array(sorted(proj))[:40], 'go')
#    plt.axis([-1, max(X), 0, 2])                                                                                                                  
    plt.show()




def main():
    """Runs the classification pipeline with command line arguments"""
    bm = openJSON('instanceClosestTutorials.json')
    tutdistance = map(lambda x: x[1][0][1], bm[0])
    otherDistance = map(lambda x: x[1][0][1], bm[1])

    def printStats (lyst, name):
        print name
        print 'average = ' + str(reduce(lambda x, y: x+y, lyst)/len(lyst))
        print 'max = ' + str(max(lyst))
        print 'min = ' + str(min(lyst))
    #plt.plot(tutdistance)                                                                                                                         
    #plt.show()                                                                                                                                    

    printStats(tutdistance, 'tutorials :')
    printStats(otherDistance, 'user projects :')
    plotTutandProj(tutdistance, otherDistance)

if __name__=='__main__':  # invoke main() when program is run
    main()



