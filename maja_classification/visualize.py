# Maja Svanberg
# visualize.py
# 2016-01-19

from math import sqrt
import json
import matplotlib.pyplot as plt
import numpy as np
import maja_lazy as lazy

def openJSON(file):
    with open(file) as jsonfile:
        data =  json.load(jsonfile)
    return data

def divideBySize(input):
    '''divided the distances by the size of the projects, 
    proved inefficient in creating a pattern so far'''
    def getWeight(project):
       with open(project[0], 'r') as data_file:
            data = json.load(data_file)
            data_file.close()
       weight = lazy.size(data)[0][1]
       if weight == 0:
           print data
           weight = 0.05
       return weight
    return map(lambda x: x[1][0][1]/getWeight(x), input)

def createPlot(closeTuts):
    '''takes a list generated by closestTutorials and 
    displays it in a plot graph'''
    fig = plt.figure()
    ax = fig.add_subplot(111)
    X = range(len(closeTuts[1]))
    Y = [x[1] for x in closeTuts[1]]
    plt.plot(X, Y, 'ro')
    plt.axis([-1, len(X), 0, closeTuts[1][-1][1]+1])
    plt.ylabel('Distance to Tutorials')
    plt.title(closeTuts[0])
    for i in X:
        xy = zip(X,[x[1] for x in closeTuts[1]])
        ax.annotate(closeTuts[1][i][0], xy=xy[i])
    plt.show()

def plotTutandProj(tutdist, projdist):
    X = np.array(tutdist)
    Y = np.array(projdist)
    plt.title('Distribution of distances to Tutorials in "tutorials" and "others"')
    plt.ylabel('Distance to Tutorials')
    plt.xlabel('distribution')
    plt.plot( X, 'go')
    plt.axis([-1, len(X), 0, 22])
    plt.plot([x*len(X)/(len(Y)) for x in range(len(Y))], Y, 'ro')
    plt.show()

def main():
    """Runs the classification pipeline with command line arguments"""
    bm = openJSON('instanceClosestTutorials.json')
    sizes = openJSON('size.json')
    
    tut = map(lambda x: x[1][0][1], bm[0])
    other = map(lambda x: x[1][0][1], bm[1])

    def printStats (lyst, name):
        print name

        print 'average = ' + str(reduce(lambda x, y: x+y, lyst)/len(lyst))
        print 'max = ' + str(max(lyst))
        print 'min = ' + str(min(lyst))

    printStats(tut, 'tutorials :')
    printStats(other, 'user projects :')
    plotTutandProj(sorted(tut), sorted(other))

if __name__=='__main__':  # invoke main() when program is run
    main()
